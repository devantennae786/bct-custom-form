import styled from 'astroturf'
import React, { useMemo } from 'react'
import {
  Editor,
  Error,
  InfoMessage,
  Preview,
  Provider,
} from '@docpocalypse/code-live'
import globalScope from '../../../scope'

const StyledInfoMessage = styled(InfoMessage)`
  composes: p-4 from global;

  border-top-left-radius: 0;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  font-size: 70%;

  *:not(:focus) + & {
    opacity: 0;
  }
`

const StyledEditor = styled(Editor)`
  & textarea {
    outline: none;
  }
`

const StyledLiveProviderChild = styled('div')`
  composes: mb-6 p-6 rounded-b-lg from global;

  background: theme('prism.bg-color');
`

const StyledPreview = styled(Preview)`
  composes: p-6 rounded-t-lg from global;

  position: relative;
  color: theme(body.color);
  border: 0.2rem solid rgb(236, 236, 236);
  border-bottom: none;

  :global(.validation-error) {
    display: block;
    color: theme('colors.error');
    margin-bottom: 20px;
    font-size: 80%;
  }

  input,
  select {
    @apply rounded bg-white leading-normal outline-none w-full mb-6 py-1 px-3 block;

    height: 36px;
    color: #495057;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    margin-bottom: 20px;

    &:focus {
      @apply shadow-outline;
    }

    & + :global(.validation-error) {
      margin-top: -16px;
    }

    &:global(.invalid-field) {
      @apply border-error;
    }
  }

  button {
    display: inline-block;
    font-weight: 400;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,
      border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

    color: #007bff;
    background-color: transparent;
    background-image: none;
    border-color: #007bff;

    &:hover {
      color: #fff;
      background-color: #007bff;
      border-color: #007bff;
    }
  }
`

const StyledError = styled(Error)`
  composes: rounded-0 alert alert-danger from global;
`

export default function LiveCode({
  code,
  scope,
  className,
  exampleClassName,
  resolveImports,
  language = 'jsx',
  showCode = true,
  showImports = false,
}) {
  const resolvedScope = useMemo(() => ({ ...scope, ...globalScope }), [scope])
  return (
    <Provider
      code={code}
      language={language}
      scope={resolvedScope}
      showImports={showImports}
      resolveImports={resolveImports}
    >
      <StyledPreview
        showCode={showCode}
        className={exampleClassName}
        infoComponent={StyledInfoMessage}
      />
      <StyledLiveProviderChild>
        {showCode && <StyledEditor className={className} />}
        <StyledError />
      </StyledLiveProviderChild>
    </Provider>
  )
}
